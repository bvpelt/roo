openapi: 3.0.1

info:
  title: 'User OpenAPI definition'
  version: 'v0.2'
  description: 'Open api specification for the user api'
  license:
    name: 'MIT'
    url: 'https://opensource.org/licenses/MIT'

tags:
  - Users

servers:
  - url: http://localhost:8080
    description: Generated server url

paths:

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a users by id
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: No user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: User is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User is deleted
        '401':
          description: User not found

  /users:
    get:
      tags:
        - Users
      summary: Get all known users
      operationId: getUsers
      responses:
        '200':
          description: Found users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: No users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Users
      summary: Register new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: New user is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
